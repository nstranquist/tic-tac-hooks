{"version":3,"sources":["components/Tile.jsx","App.jsx","index.js"],"names":["Tile","index","tile","handleTileClick","className","onClick","App","useState","winner","setWinner","board","setBoard","p1Turn","setP1Turn","moves","setMoves","useEffect","resetBoard","console","log","checkWinner","map","row","rowIndex","newBoard","tileIndex","key","ReactDOM","render","document","getElementById"],"mappings":"iPAeeA,EAbF,SAAC,GAIP,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,gBAEA,OACE,yBAAKC,UAAU,OACbC,QAAS,kBAAMF,EAAgBF,KACrB,OAATC,EAAgB,GAAKA,IC+GbI,G,KA/GH,WAAO,IAAD,EACYC,mBAAS,MADrB,mBACTC,EADS,KACDC,EADC,OAEUF,mBAAS,CAAC,GAAG,GAAG,KAF1B,mBAETG,EAFS,KAEFC,EAFE,OAGYJ,oBAAS,GAHrB,mBAGTK,EAHS,KAGDC,EAHC,OAIUN,mBAAS,GAJnB,mBAITO,EAJS,KAIFC,EAJE,KAMhBC,qBAAU,WACRC,MACC,IAEHD,qBAAU,WAERE,QAAQC,IAAI,gBACZC,IACGN,EAAQ,EAAGC,EAASD,EAAM,GACxBL,EAAU,UACd,CAACG,IAEJ,IAAMQ,EAAc,WAoBE,CAClB,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAGKC,KAAI,SAACC,EAAKC,GAIjBb,EAAMY,EAAI,KAAOZ,EAAMY,EAAI,KAAOZ,EAAMY,EAAI,KAC1CZ,EAAMY,EAAI,MAAQZ,EAAMY,EAAI,KAAOZ,EAAMY,EAAI,MAAQZ,EAAMY,EAAI,MAChEJ,QAAQC,IAAI,oBAAqBT,EAAMY,EAAI,KACtB,MAAlBZ,EAAMY,EAAI,KACXb,EAAU,KACS,MAAlBC,EAAMY,EAAI,KACXb,EAAU,UASdQ,EAAa,kBAAMN,EAAS,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,QAQrER,EAAkB,SAACF,GACvBiB,QAAQC,IAAI,yBAA0BlB,GACtC,IAAIC,EAAOQ,EAAMT,GACbuB,EAAWd,EAEXF,GAAWN,IAEbgB,QAAQC,IAAI,kBAAmBP,EAAS,KAAO,MAE7CV,EADCU,EACM,IACC,IACVY,EAASvB,GAASC,EAClBS,EAASa,GACTX,GAAWD,KAKf,OACE,yBAAKR,UAAU,mBACb,wBAAIA,UAAU,eAAd,iBAECI,GAAU,uBAAGJ,UAAU,eAAb,WAAoCI,GAC/C,yBAAKJ,UAAU,SAEZM,EAAMW,KAAI,SAACnB,EAAMuB,GAEhB,OADAP,QAAQC,IAAI,eAAgBjB,GACrB,kBAAC,EAAD,CAAMwB,IAAKD,EAAWxB,MAAOwB,EAAWvB,KAAMA,EAAMC,gBAAiBA,QAG/EK,GAAU,4BAAQJ,UAAU,cAAcC,QArC7B,WAChBY,IACAJ,GAAU,GACVE,EAAS,GACTN,GAAU,KAiCG,c,MC/GjBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f62b94fd.chunk.js","sourcesContent":["import React from 'react'\n\nconst Tile = ({\n  index,\n  tile,\n  handleTileClick,\n}) => {\n  return (\n    <div className='tile'\n      onClick={() => handleTileClick(index)}>\n      {tile === null ? '' : tile}\n    </div>\n  )\n}\n\nexport default Tile\n","import React, { useState, useEffect } from 'react';\nimport Tile from './components/Tile'\nimport './app.css'\n\n// const sampleBoard = [\n//   ['X', 'O', null],\n//   ['X', 'O', null],\n//   ['X', 'O', null],\n// ]\n\nconst App = () => {\n  const [winner, setWinner] = useState(null)  // active state will be string or boolean\n  const [board, setBoard] = useState([[],[],[]])  // will want to instantiate and map\n  const [p1Turn, setP1Turn] = useState(true)  // check if its' player1's move (true) or player2's (false)\n  const [moves, setMoves] = useState(0)\n\n  useEffect(() => {\n    resetBoard()\n  }, [])\n\n  useEffect(() => {\n    // check for winner when board changes\n    console.log(\"player moved\")\n    checkWinner()\n    if(moves < 9) setMoves(moves+1)\n    else setWinner('draw')\n  }, [p1Turn])\n\n  const checkWinner = () => {\n    // check board for 3 in a row\n    // 1. if 3 in a row horizontal (3 possibles)\n    // 2. if 3 in a row vertical (3 possibles)\n    // 3. if 3 in a row diagonal (2 possibles)\n    // let horizontal = [ // can do (row + col) to find real value. will assume values from 0,1,2 = (0 - 4)\n    //   [0,1,2],\n    //   [1,2,3],\n    //   [2,3,4],\n    // ]\n    // let vertical = [\n    //   [0,1,2],\n    //   [1,2,3],\n    //   [2,3,4],\n    // ]\n    // let diagonal = [\n    //   [0,2,4],\n    //   [0,2,4],\n    // ]\n    // EDIT: will now be 0-8 to check for wins\n    const winPatterns = [ // combine patterns from above\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6],\n    ]\n    // loop through board\n    winPatterns.map((row, rowIndex) => {\n      //let savedRow = []\n      //let win = row\n      //const [ one, two, three ] = row\n      if(board[row[0]] && board[row[1]] && board[row[2]]) { // check if all tiles in pattern have been played\n        if(board[row[0]] === board[row[1]] && board[row[1]] === board[row[2]]) {\n          console.log('we have a winner:', board[row[0]])\n          if(board[row[0]] === 'X')\n            setWinner('X')\n          if(board[row[0]] === 'O')\n            setWinner('O')\n        }\n      }\n      //savedRow.push(col)\n      // check row for wins\n    })\n    // if a case does exist, check value and match to winner, setWinner({player})\n  }\n\n  const resetBoard = () => setBoard([null,null,null,null,null,null,null,null,null]) // set board to 9 null values in only 1 row\n  const resetGame = () => {\n    resetBoard()\n    setP1Turn(true)\n    setMoves(0)\n    setWinner(false)\n  }\n\n  const handleTileClick = (index) => {\n    console.log('tile clicked at index:', index)\n    let tile = board[index]\n    let newBoard = board\n    // check if already filled or if game is over\n    if(!winner && !tile) {\n      // can click tile, then set board to show it's filled (checking p1Turn)\n      console.log('setting tile to', p1Turn ? 'p1' : 'p2')\n      if(p1Turn)\n        tile = 'X'\n      else tile='O'\n      newBoard[index] = tile\n      setBoard(newBoard)\n      setP1Turn(!p1Turn)\n    }\n  }\n  \n  // TODO: how to minimize renders?\n  return (\n    <div className=\"board-container\">\n      <h1 className=\"board-title\">\n        Tic Tac Hooks</h1>\n      {winner && <p className='winner-text'>Winner: {winner}</p> }\n      <div className=\"board\">\n        {/* 9 tiles, will want to map */}\n        {board.map((tile, tileIndex) => {\n          console.log('mapped tile:', tile)\n          return <Tile key={tileIndex} index={tileIndex} tile={tile} handleTileClick={handleTileClick} />\n        })}\n      </div>\n      {winner && <button className='restart-btn' onClick={resetGame}>Restart</button>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}